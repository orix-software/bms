{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BMS : bank management system","text":"<p>It's a cc65 library for Orix in order to manage bank on twilighte board.</p> <p>It only manage ram bank.</p> <p></p>"},{"location":"#versions","title":"Versions","text":"<ul> <li>2025.3 documentation</li> </ul>"},{"location":"_bms_create/","title":"bms create","text":""},{"location":"_bms_create/#void-bms_createsize_t-length-unsigned-char-flags","title":"void *bms_create(size_t length, unsigned char flags);","text":""},{"location":"_bms_error/","title":"bms error","text":""},{"location":"_bms_error/#unsigned-char-bms_error","title":"unsigned char bms_error();","text":""},{"location":"_bms_free/","title":"bms free","text":""},{"location":"_bms_free/#unsigned-char-bms_freebms-bms","title":"unsigned char bms_free(bms *bms);","text":""},{"location":"_bms_read/","title":"bms read","text":""},{"location":"_bms_read/#unsigned-int-bms_writebms-bms-unsigned-int-length-void-data","title":"unsigned int bms_write(bms bms, unsigned int length, void data);","text":""},{"location":"_bms_read_write/","title":"bms read write","text":""},{"location":"_bms_read_write/#unsigned-int-bms_writebms-bms-unsigned-int-length-void-data","title":"unsigned int bms_write(bms bms, unsigned int length, void data);","text":""},{"location":"_bms_seek/","title":"bms seek","text":""},{"location":"_bms_seek/#unsigned-int-bms_seekbms-bms-unsigned-int-offset-unsigned-char-whence","title":"unsigned int bms_seek(bms *bms, unsigned int offset, unsigned char whence);","text":""},{"location":"_bms_write/","title":"bms write","text":""},{"location":"_bms_write/#unsigned-int-bms_writebms-bms-unsigned-int-length-void-data","title":"unsigned int bms_write(bms bms, unsigned int length, void data);","text":""},{"location":"example_create_free/","title":"Example create free","text":"CAssembly/ca65 <pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include \"bms.h\"\n\nint main() {\n    bms *bms_instance;\n    int i;\n    off_t length = 6400; // Example length\n\n    printf(\"Creating bms instance with length %ld....\\n\", length);\n    bms_instance = bms_create(length, FLAG_PROT_READ_WRITE);\n    if (bms_instance == NULL) {\n        printf(\"Failed to create bms instance\\n\");\n        return 0;\n\n    }\n    else {\n        // If we can allocate more than 16 bits, it should not work in that\n        printf(\"bms instance created successfully, it's an error.\\n\");\n        return 0;\n    }\n}\n</code></pre> <pre><code>.include \"bms.inc\"\n</code></pre>"},{"location":"2025.3/","title":"BMS : bank management system (2025.3)","text":""},{"location":"2025.3/#usage-in-c-language","title":"Usage in c language","text":"<ul> <li>void *bms_create(size_t length, unsigned char flags);</li> <li>unsigned char bms_free(bms *bms);</li> <li>unsigned int bms_seek(bms *bms, unsigned int offset, unsigned char whence);</li> <li>unsigned int bms_read_write(bms bms, unsigned int length, void data, unsigned char mode);</li> <li>unsigned char bms_error();</li> <li>unsigned char bms_version();</li> </ul>"},{"location":"2025.3/#usage-in-assembly-language","title":"Usage in assembly language","text":"<ul> <li>bms_create</li> <li>bms_free</li> <li>bms_seek</li> <li>bms_read_write</li> <li>bms_error</li> <li>bms_version</li> </ul>"},{"location":"2025.3/#examples","title":"Examples","text":"<ul> <li>Examples</li> </ul>"},{"location":"2025.3/_bms_create/","title":"bms create","text":""},{"location":"2025.3/_bms_create/#void-bms_createsize_t-length-unsigned-char-flags","title":"void *bms_create(size_t length, unsigned char flags);","text":"<p>Description</p> <p>Create slots for bank memory system. Returns NULL and store error, if something is wrong, or returns struct ptr if success</p> <p>Input</p> <ul> <li>flags (unsigned char) as FLAG_PROT_READ_WRITE</li> <li>length (long)</li> </ul>"},{"location":"2025.3/_bms_error/","title":"bms error","text":""},{"location":"2025.3/_bms_error/#unsigned-char-bms_error","title":"unsigned char bms_error();","text":"<p>Description</p> <p>Returns the last error code from the previous bms command</p> <p>Returns</p> <ul> <li>error code (unsigned char)</li> </ul>"},{"location":"2025.3/_bms_free/","title":"bms free","text":""},{"location":"2025.3/_bms_free/#unsigned-char-bms_freebms-bms","title":"unsigned char bms_free(bms *bms);","text":"<p>Input</p> <ul> <li>bms (bms *) bms struct</li> </ul>"},{"location":"2025.3/_bms_read_write/","title":"bms read write","text":""},{"location":"2025.3/_bms_read_write/#unsigned-int-bms_writebms-bms-unsigned-int-length-void-data","title":"unsigned int bms_write(bms bms, unsigned int length, void data);","text":"<p>Description</p> <p>read or write data</p> <p>Input</p> <ul> <li>bms (bms *) bms struct</li> <li>data (void *) data</li> <li>length (void *) length to put or to get</li> </ul> <p>Returns</p> <ul> <li>(unsigned int) number of bytes read or written</li> </ul>"},{"location":"2025.3/_bms_seek/","title":"bms seek","text":""},{"location":"2025.3/_bms_seek/#unsigned-int-bms_seekbms-bms-unsigned-int-offset-unsigned-char-whence","title":"unsigned int bms_seek(bms *bms, unsigned int offset, unsigned char whence);","text":"<p>Description</p> <p>seek to offset</p> <p>Input</p> <ul> <li>bms (bms *) bms struct</li> <li>offset (unsigned int) data</li> <li>whence (unsigned char)</li> </ul> <p>Returns</p> <ul> <li>(unsigned int) result</li> </ul>"},{"location":"2025.3/_bms_version/","title":"bms version","text":""},{"location":"2025.3/_bms_version/#unsigned-int-bms_version","title":"unsigned int bms_version();","text":"<p>Description</p> <p>free bms</p> <p>Returns</p> <ul> <li>(unsigned int) version</li> </ul>"},{"location":"2025.3/bms_bank_restore_state/","title":"Bms bank restore state","text":""},{"location":"2025.3/bms_bank_restore_state/#bms_bank_restore_state","title":"bms_bank_restore_state","text":"<p>Description</p> <p>restore the state of the bank</p> <p>Modify</p> <ul> <li>RESB</li> <li>TR0</li> <li>TR0</li> </ul>"},{"location":"2025.3/bms_bank_save_state/","title":"Bms bank save state","text":""},{"location":"2025.3/bms_bank_save_state/#bms_bank_save_state","title":"bms_bank_save_state","text":"<p>Description</p> <p>save the state of the bank</p> <p>Modify</p> <ul> <li>RESB</li> <li>TR0</li> <li>TR0</li> </ul>"},{"location":"2025.3/bms_create/","title":"Bms create","text":""},{"location":"2025.3/bms_create/#bms_create","title":"bms_create","text":"<p>Description</p> <p>Create slots for bank memory system. Returns NULL and store error, if something is wrong, or returns struct ptr if success</p> <p>Input</p> <ul> <li>Accumulator : flags (eg : FLAG_PROT_READ_WRITE only supported)</li> <li>Y Register : low byte of the length to allocate (0 to 7)</li> <li>X Register : high byte of the length to allocate (8 to 15)</li> <li>RES : 2 bytes of the length to allocate (16 to 23)</li> </ul> <p>Modify</p> <ul> <li>RES</li> <li>TR2</li> <li>libzp</li> <li>libzp+2</li> <li>libzp+4</li> <li>libzp+5</li> </ul> <p>Returns</p> <ul> <li>Accumulator : the low ptr for bms struct it returns null ($00 in A and X)</li> <li>X Register : the low ptr for bms struct it returns null ($00 in A and X)</li> </ul> <p>Use \"BMS_CREATE length0_to_15, length16_to_31, flags\" macro in 'include/bms.mac'</p> <p>Example</p> <pre><code> lda #FLAG_PROT_READ_WRITE\n ldx #&gt;15000 ; Length : 15000\n ldy #&lt;15000\n jsr bms_create\n cmp #$00\n bne @not_null\n cpx #$00\n bne @not_null\n ; can not be allocated\n rts\n@not_null:\n ...\n</code></pre>"},{"location":"2025.3/bms_error/","title":"Bms error","text":""},{"location":"2025.3/bms_error/#bms_error","title":"bms_error","text":"<p>Description</p> <p>Returns the error code</p> <p>Returns</p> <ul> <li>Accumulator : contains the error code</li> </ul> <p>Example</p> <pre><code> jsr bms_error\n ; A contains error code\n rts\n</code></pre>"},{"location":"2025.3/bms_free/","title":"Bms free","text":""},{"location":"2025.3/bms_free/#bms_free","title":"bms_free","text":"<p>Description</p> <p>Free bms struct and liberate banks</p> <p>Input</p> <ul> <li>Accumulator : low byte of the bms struct pointer</li> <li>X Register : high byte of the bms struct pointer</li> </ul> <p>Modify</p> <ul> <li>libzp</li> <li>libzp+2</li> <li>libzp+4</li> <li>libzp+5</li> </ul> <p>Example</p> <p><pre><code> lda bms_ptr\n ldx bms_ptr + 1\n jsr bms_free\n rts\n</code></pre> Here</p>"},{"location":"2025.3/bms_read_write/","title":"Bms read write","text":""},{"location":"2025.3/bms_read_write/#bms_read_write","title":"bms_read_write","text":"<p>Description</p> <p>read or Write bytes (TR0 and TR1 contains the data copyied from bank)</p> <p>Input</p> <ul> <li>Accumulator : contains the low ptr to the bms structure</li> <li>X Register : contains the high ptr byte to the bms structure</li> <li>Y Register : mode </li> </ul> <p>Example</p> <pre><code> ; Store size\n lda #&lt;5\n sta TR2\n lda #&gt;5\n sta TR3\n ldx #&gt;5\n ; Store ptr\n lda #&lt;str\n sta TR0\n lda #&gt;str\n sta TR1\n ldy #BMS_WRITE_MODE\n lda bms_ptr\n ldx bms_ptr + 1\n jsr bms_read_write\n rts\nstr:\n .asciiz \"hello\"\n</code></pre> <p>Description</p> <p>compute bank and set depending of the offset (bms_ptr must be set), and set current bank set</p> <p>Modify</p> <ul> <li>RESB</li> <li>TR0</li> <li>libzp</li> <li>libzp+9</li> </ul>"},{"location":"2025.3/bms_seek/","title":"Bms seek","text":""},{"location":"2025.3/bms_seek/#bms_seek","title":"bms_seek","text":"<p>Description</p> <p>Seek in the bms offset</p> <p>Input</p> <ul> <li>Accumulator : low byte of the bms struct pointer</li> <li>X Register : high byte of the bms struct pointer</li> <li>Y Register : whence </li> </ul> <p>Modify</p> <ul> <li>libzp</li> </ul> <p>Example</p> <pre><code> lda #&lt;5 ; Offset low\n sta TR0 ; Offset low\n lda #&gt;5 ; Offset high\n sta TR1 ; Offset high\n lda bms_ptr ; Offset High of bms struct\n ldx bms_ptr + 1; Offset High of bms struct\n ldy #BMS_SEEK_CUR\n jsr bms_seek\n jsr rts\n</code></pre>"},{"location":"2025.3/bms_version/","title":"Bms version","text":""},{"location":"2025.3/bms_version/#bms_version","title":"bms_version","text":"<p>Description</p> <p>returns version</p>"}]}